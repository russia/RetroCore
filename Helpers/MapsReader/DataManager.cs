using System;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;

namespace RetroCore.Helpers.MapsReader
{
    public static class DataManager
    {
        private static bool gamePathFound = false;

        public static void Initialize()
        {
           
            //bool gamePathFound = Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Ankama\\zaap\\retro\\resources\\app\\retroclient\\data\\maps");

            //if (!gamePathFound)
            //{
            //    StringHelper.WriteLine("[Warning], can't find retroclient, DataManager will download maps datas.", ConsoleColor.Yellow);
            //    return;
            //}
            //else
            //    Constants.MapsPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Ankama\\zaap\\retro\\resources\\app\\retroclient\\data\\maps";

            //string[] Files = Directory.GetFiles(Constants.MapsPath, "*.swf", SearchOption.TopDirectoryOnly);
            //StringHelper.WriteLine($"[DataManager] {Files.Count()} maps found !", ConsoleColor.Cyan);
        }

        public static void DownloadMap(string id, string mapid)
        {
            if (File.Exists($"./maps/{id}_{mapid}.swf"))
                return;
            if (!Directory.Exists("./maps/"))
                Directory.CreateDirectory("./maps/");
            using (var client = new WebClient())
                client.DownloadFile($"https://dofusretro.cdn.ankama.com/maps/" + id + "_" + mapid + ".swf", $"./maps/{id}_{mapid}.swf");
        }

        public static void GetSwfContent(string id, string mapid)
        {
            if (!gamePathFound)
            {
                DownloadMap(id, mapid);
            }

            //open files



            //get values and mapdata 
            string map_key = "6a292e2c446752644236725b68355d733e3a446060303e7d476e7c63354e5e42505052657756526b32585753473b64782f6f2261545d47732a5e63253242772532427e4b636c663a6e33395031705c4461386348652d527f6059365d5154703a4c39416d342962707e653b214c2e7657573c4f5542223f5d285b66423a446c5d723c2f594a6d7820787826505b253242663d463150253235304b4e41312d7f784e7d23712c655a5230335f55382046202869795f6e71415463753c4f3840492c4e";
            string data = "";
            string value = DecypherData(data, map_key);
            Console.WriteLine(value);
        }

        private static string DecypherData(string data, string decryptKey)
        {
            try
            {
                var result = string.Empty;

                if (decryptKey == "") return data;

                decryptKey = PrepareKey(decryptKey);
                var checkSum = CheckSum(decryptKey) * 2;

                for (int i = 0, k = 0; i < data.Length; i += 2)
                    result += (char)(int.Parse(data.Substring(i, 2), NumberStyles.HexNumber) ^ decryptKey[(k++ + checkSum) % decryptKey.Length]);

                return Uri.UnescapeDataString(result);
            }
            catch
            {
                return "error";
            }
        }

        private static string PrepareKey(string key)
        {
            var keyResult = string.Empty;
            for (var i = 0; i < key.Length; i += 2)
                keyResult += Convert.ToChar(int.Parse(key.Substring(i, 2), NumberStyles.HexNumber));
            return Uri.UnescapeDataString(keyResult);
        }

        private static int CheckSum(string data) => data.Sum(t => t % 16) % 16;
    }
}